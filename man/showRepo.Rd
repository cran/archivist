% Generated by roxygen2 (4.0.0): do not edit by hand
\name{showLocalRepo}
\alias{showGithubRepo}
\alias{showLocalRepo}
\title{View the Lisf of Artifacts from a Repository}
\usage{
showLocalRepo(repoDir, method = "md5hashes")

showGithubRepo(repo, user, branch = "master", repoDirGit = FALSE,
  method = "md5hashes")
}
\arguments{
  \item{method}{A character specifying the method to be
  used to show the Repository. Available methods:
  \code{md5hashes} (default), \code{tags}.}

  \item{repoDir}{A character denoting an existing directory
  of a Repository for which a summary will be returned.}

  \item{repo}{Only if working with a Github repository. A
  character containing a name of a Github repository on
  which the Repository is archived.}

  \item{user}{Only if working with a Github repository. A
  character containing a name of a Github user on whose
  account the \code{repo} is created.}

  \item{branch}{Only if working with a Github repository. A
  character containing a name of Github Repository's branch
  on which a Repository is archived. Default \code{branch}
  is \code{master}.}

  \item{repoDirGit}{Only if working with a Github
  repository. A character containing a name of a directory
  on Github repository on which the Repository is stored.
  If the Repository is stored in main folder on Github
  repository, this should be set to \code{repoDirGit =
  FALSE} as default.}
}
\value{
If parameter \code{method} was set as \code{md5hashes} a
\code{data.frame} with artifacts' names and archived
\code{md5hashes} is returned.

If parameter \code{method} was set as \code{tags} a
\code{data.frame} with archived \code{Tags} and archived
artifacts' \code{md5hashes} is returned.

To learn more about \code{Tags} or \code{md5hashes} check:
\link{Tags} or \link{md5hash}.
}
\description{
\code{showLocalRepo} and \code{showGithubRepo} functions
produce the \code{data.frame} of the artifacts from a
\link{Repository} saved in a given \code{repoDir}
(directory). \code{showLocalRepo} shows the artifacts from
the \code{Repository} that exists on the user's computer,
whereas \code{showGithubRepo} shows the artifacts of the
\code{Repository} existing on a Github repository. To learn
more about artifacts visit
\link[archivist]{archivist-package}.
}
\details{
\code{showLocalRepo} and \code{showGithubRepo} functions
produce the \code{data.frame} of the artifacts from a
\link{Repository} saved in a given \code{repoDir}
(directory). \code{showLocalRepo} shows the artifacts from
the \code{Repository} that exists on the user's computer,
whereas \code{showGithubRepo} shows the artifacts of the
\code{Repository} existing on a Github repository.

Both functions show the current state of a
\code{Repository}, inter alia, all archived artifacts can
be seen with their unique \link{md5hash} or a
\code{data.frame} with archived \link{Tags} can be
obtained. Also there is an extra column with a date of
creation the \code{Tag} or the \code{md5hash}.
}
\examples{
# objects preparation
\dontrun{
# data.frame object
data(iris)

# ggplot/gg object
library(ggplot2)
df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),y = rnorm(30))
library(plyr)
ds <- ddply(df, .(gp), summarise, mean = mean(y), sd = sd(y))
myplot123 <- ggplot(df, aes(x = gp, y = y)) +
  geom_point() +  geom_point(data = ds, aes(y = mean),
               colour = 'red', size = 3)

# lm object
model <- lm(Sepal.Length~ Sepal.Width + Petal.Length + Petal.Width, data= iris)


# lda object
library(MASS)

Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
                  Sp = rep(c("s","c","v"), rep(50,3)))
train <- c(8,83,115,118,146,82,76,9,70,139,85,59,78,143,68,
           134,148,12,141,101,144,114,41,95,61,128,2,42,37,
           29,77,20,44,98,74,32,27,11,49,52,111,55,48,33,38,
           113,126,24,104,3,66,81,31,39,26,123,18,108,73,50,
           56,54,65,135,84,112,131,60,102,14,120,117,53,138,5)
lda1 <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)

# qda object
tr <- c(7,38,47,43,20,37,44,22,46,49,50,19,4,32,12,29,27,34,2,1,17,13,3,35,36)
train <- rbind(iris3[tr,,1], iris3[tr,,2], iris3[tr,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
qda1 <- qda(train, cl)

# glmnet object
library( glmnet )

zk=matrix(rnorm(100*20),100,20)
bk=rnorm(100)
glmnet1=glmnet(zk,bk)

# creating example Repository - that examples will work

exampleRepoDir <- tempdir()
createEmptyRepo(repoDir = exampleRepoDir)
saveToRepo(myplot123, repoDir=exampleRepoDir)
saveToRepo(iris, repoDir=exampleRepoDir)
saveToRepo(model, repoDir=exampleRepoDir)

# show examples

showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
showLocalRepo(method = "tags", repoDir = exampleRepoDir)

# let's add more artifacts

saveToRepo(glmnet1, repoDir=exampleRepoDir)
saveToRepo(lda1, repoDir=exampleRepoDir)
(qda1Md5hash <- saveToRepo(qda1, repoDir=exampleRepoDir))

# show now

showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
showLocalRepo(method = "tags", repoDir = exampleRepoDir)

# what if we remove an artifact

rmFromRepo(qda1Md5hash, repoDir = exampleRepoDir)

# show now

showLocalRepo(method = "md5hashes", repoDir = exampleRepoDir)
showLocalRepo(method = "tags", repoDir = exampleRepoDir)

# GitHub version

showGithubRepo(method = "md5hashes", user = "pbiecek", repo = "archivist")
showGithubRepo(method = "tags", user = "pbiecek", repo = "archivist", branch = "master")

# removing an example Repository

deleteRepo( exampleRepoDir )

rm( exampleRepoDir )

# many archivist-like Repositories on one Github repository

showGithubRepo( user="MarcinKosinski", repo="Museum", branch="master",
repoDirGit="ex1")
showGithubRepo( user="MarcinKosinski", repo="Museum", branch="master",
                repoDirGit="ex2")

}
}
\author{
Marcin Kosinski , \email{m.p.kosinski@gmail.com}
}
\seealso{
Other archivist: \code{\link{Repository}};
\code{\link{Tags}}; \code{\link{archivist-package}};
\code{\link{copyGithubRepo}}, \code{\link{copyLocalRepo}};
\code{\link{createEmptyRepo}}; \code{\link{deleteRepo}};
\code{\link{getTagsGithub}}, \code{\link{getTagsLocal}};
\code{\link{loadFromGithubRepo}},
\code{\link{loadFromLocalRepo}}; \code{\link{md5hash}};
\code{\link{rmFromRepo}}; \code{\link{saveToRepo}};
\code{\link{searchInGithubRepo}},
\code{\link{searchInLocalRepo}};
\code{\link{summaryGithubRepo}},
\code{\link{summaryLocalRepo}};
\code{\link{tarGithubRepo}}, \code{\link{tarLocalRepo}}
}

